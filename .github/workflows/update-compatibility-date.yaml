name: Update Cloudflare Workers Compatibility Date
on:
  schedule:
    - cron: '0 0 * * 1'  # æ¯Žé€±æœˆæ›œæ—¥ 9:00 JST (00:00 UTC)
  workflow_dispatch:
jobs:
  update-compatibility-date:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Get latest compatibility_date
        id: get_date
        run: |
          URL="https://developers.cloudflare.com/workers/configuration/compatibility-flags/"
          HTML=$(curl -sS "$URL")
          if [ -z "$HTML" ]; then
            echo "Error: Failed to fetch HTML" >&2
            exit 1
          fi
          DATES=$(echo "$HTML" | grep -oP '<td><strong>Default as of</strong></td><td>\K[0-9]{4}-[0-9]{2}-[0-9]{2}')
          if [ -z "$DATES" ]; then
            echo "Error: No dates found" >&2
            exit 1
          fi
          LATEST_DATE=$(echo "$DATES" | sort | tail -1)
          echo "latest_date=$LATEST_DATE" >> $GITHUB_OUTPUT
          echo "Latest compatibility_date: $LATEST_DATE"
      - name: Find all compatibility_dates in Terraform files
        id: find_dates
        run: |
          DATES=$(grep -rh "compatibility_date" . --include="*.tf" | grep -oP 'compatibility_date\s*=\s*"\K[0-9]{4}-[0-9]{2}-[0-9]{2}' | sort -u)
          if [ -z "$DATES" ]; then
            echo "Warning: Could not find any compatibility_date in Terraform files"
            echo "found=false" >> $GITHUB_OUTPUT
          else
            echo "found=true" >> $GITHUB_OUTPUT
            echo "Found compatibility_dates:"
            echo "$DATES"
            DATES_SPACE=$(echo "$DATES" | tr '\n' ' ')
            echo "dates=$DATES_SPACE" >> $GITHUB_OUTPUT
          fi
      - name: Check if any updates are needed
        id: check_update
        if: steps.find_dates.outputs.found == 'true'
        run: |
          LATEST="${{ steps.get_date.outputs.latest_date }}"
          CURRENT_DATES="${{ steps.find_dates.outputs.dates }}"
          echo "Latest compatibility_date: $LATEST"
          echo "Current compatibility_dates in repository: $CURRENT_DATES"
          if echo "$CURRENT_DATES" | grep -q "$LATEST"; then
            if [ "$CURRENT_DATES" = "$LATEST " ] || [ "$CURRENT_DATES" = "$LATEST" ]; then
              echo "needs_update=false" >> $GITHUB_OUTPUT
              echo "âœ“ All files already use the latest date: $LATEST"
            else
              echo "needs_update=true" >> $GITHUB_OUTPUT
              echo "âš  Some files use older dates. Latest: $LATEST"
            fi
          else
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "âš  Update needed. Latest: $LATEST, Current: $CURRENT_DATES"
          fi
      - name: Update all Terraform files
        if: steps.find_dates.outputs.found == 'true' && steps.check_update.outputs.needs_update == 'true'
        run: |
          LATEST="${{ steps.get_date.outputs.latest_date }}"
          CURRENT_DATES="${{ steps.find_dates.outputs.dates }}"
          echo "Updating all compatibility_date to: $LATEST"
          for OLD_DATE in $CURRENT_DATES; do
            if [ "$OLD_DATE" != "$LATEST" ]; then
              echo "Replacing $OLD_DATE with $LATEST"
              find . -name "*.tf" -type f -exec sed -i \
                "s/compatibility_date\s*=\s*\"$OLD_DATE\"/compatibility_date = \"$LATEST\"/g" {} \;
            fi
          done
          if git diff --quiet; then
            echo "No changes were made"
          else
            echo "Changed files:"
            git diff --name-only
            echo ""
            echo "Summary of changes:"
            git diff --stat
          fi
      - name: Create Pull Request
        if: steps.find_dates.outputs.found == 'true' && steps.check_update.outputs.needs_update == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Cloudflare Workers compatibility_date to ${{ steps.get_date.outputs.latest_date }}"
          title: "Update Cloudflare Workers compatibility_date to ${{ steps.get_date.outputs.latest_date }}"
          body: |
            ## ðŸ”„ Cloudflare Workers Compatibility Date Update
            
            - **Current dates:** `${{ steps.find_dates.outputs.dates }}`
            - **New date:** `${{ steps.get_date.outputs.latest_date }}`
            
            ### Changes
            - Updated `compatibility_date` to the latest version in all Terraform files
            
            ### References
            - [Cloudflare Workers Compatibility Flags](https://developers.cloudflare.com/workers/configuration/compatibility-flags/)
            - [Compatibility Dates Documentation](https://developers.cloudflare.com/workers/configuration/compatibility-dates/)
            
            ---
            *This PR was automatically generated by the weekly compatibility date check workflow.*
          branch: update-compatibility-date-${{ steps.get_date.outputs.latest_date }}
          delete-branch: true
          labels: |
            dependencies
